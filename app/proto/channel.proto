syntax = "proto3";

import "init_proposal.proto";
option go_package = "github.com/openware/state-channels/app/internal/proto";

// channel?
service ChannelService {
  // Public
  rpc Init(InitChannelRequest) returns (InitChannelResponse);
  // Public
  rpc ApproveInit(ApproveRequest) returns (ApproveResponse);
  // Public
  rpc Fund(FundChannelRequest) returns (FundChannelResponse);
  // Public
  rpc ApproveFunding(ApproveRequest) returns (ApproveResponse);
  // Public
  rpc ProposeState(ChannelRequest) returns (ProposeResponse);
  // Public
  rpc SignState(SignStateRequest) returns (SignStateResponse);
  // Public
  rpc Conclude(ConcludeRequest) returns (ConcludeResponse);
  // Public
  rpc CheckSignature(CheckSignatureRequest) returns (BoolResponse);
  // Public
  rpc CurrentState(ChannelRequest) returns (CurrentStateResponse);
  // Public
  rpc CheckHoldings(ChannelRequest) returns (CheckHoldingsResponse);
  // Public
  rpc StateIsFinal(ChannelRequest) returns (BoolResponse);
}

message InitChannelRequest {
  bytes initial_proposal = 1;
  uint32 participant_index = 2;
}

message InitChannelResponse {
  bytes channel = 1;
}

message ApproveRequest {
  bytes private_key = 1;
  bytes channel = 2;
}

message Signature {
  bytes r = 1;
  bytes s = 2;
  bytes v = 3;
}

message ApproveResponse {
  Signature signature = 1;
}

message ChannelRequest {
  bytes channel = 1;
}

message GasStation {
  int64 gas_price = 1;
  uint64 gas_limit = 2;
}

message FundChannelRequest {
  Participant participant = 1;
  bytes private_key = 2;
  optional GasStation gas_station = 3;
  bytes channel = 4;
}

message FundChannelResponse {
  string tx_id = 1;
}

message ProposeResponse {
  bytes state_proposal = 1;
}

message SignStateRequest {
  bytes state_proposal = 1;
  bytes private_key = 2;
  bytes channel = 3;
}

message SignStateResponse {
  Signature signature = 1;
}

message ConcludeRequest {
  Participant participant = 1;
  bytes private_key = 2;
  map<string, Signature> signatures = 3;
  optional GasStation gas_station = 4;
  bytes channel = 5;
}

message ConcludeResponse {
  string tx_id = 1;
}

message CurrentStateResponse {
  State state = 1;
}

message CheckHoldingsResponse {
  int64 amount = 1;
}

message BoolResponse {
  bool ok = 1;
}

message CheckSignatureRequest {
  Signature signature = 1;
  State state = 2;
  bytes channel = 3;
}

message State {
  uint64 chain_id = 1;
  repeated string participants = 2;
  int64 channel_nonce = 3;
  string app_definition = 4;
  uint64 challenge_duration = 5;
  bytes app_data = 6;
  bytes outcome = 7;
  uint64 turn_num = 8;
  bool is_final = 9;
}